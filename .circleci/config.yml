version: 2.1
commands:
  before:
    steps:
      - dep_ensure
      - configure_git
  configure_git:
    steps:
      - run:
          name: Configure Git
          command: |
            set -x
            # must be configured for tests to run
            git config --global user.email you@example.com
            git config --global user.name "Your Name"
  dep_ensure:
    steps:
      - restore_cache:
          keys:
            - dep-ensure-v1-{{ checksum "Gopkg.lock" }}
      - run:
          name: Run dep ensure
          command: '[ -f ./vendor/$(sha256sum Gopkg.lock | cut -d " " -f 1) ] || (dep ensure -v && touch ./vendor/$(sha256sum Gopkg.lock | cut -d " " -f 1) )'
      - save_cache:
          key: dep-ensure-v1-{{ checksum "Gopkg.lock" }}
          paths:
            - vendor
jobs:
  build:
    working_directory: /go/src/github.com/argoproj/argo-cd
    docker:
      - image: argoproj/argo-cd-ci-builder:v1.0.0
    steps:
      - checkout
      - before
      - run:
          name: Make binaries
          command: |
            make server controller repo-server cli
#      - run:
#          name: Run unit tests
#          command: |
#            make test
#      - run:
#          name: Uploading code coverage
#          command: bash <(curl -s https://codecov.io/bash) -f coverage.out
#          # This takes 2m, lets background it.
#          background: true
      - run:
          name: Generate code
          command: make codegen
      - run:
          name: Lint code
          # use GOGC to limit memory usage in exchange for CPU usage, https://github.com/golangci/golangci-lint#memory-usage-of-golangci-lint
          # we have 8GB RAM, 2CPUs https://circleci.com/docs/2.0/executor-types/#using-machine
          command: LINT_GOGC=50 LINT_CONCURRENCY=2 LINT_DEADLINE=2m0s make lint
      - run:
          name: Check nothing has changed
          command: |
            set -xo pipefail
            # This makes sure you ran `make pre-commit` before you pushed.
            # We exclude the Swagger resources; CircleCI doesn't generate them correctly.
            # When this fails, it will, create a patch file you can apply locally to fix it.
            # To troubleshoot builds: https://argoproj.github.io/argo-cd/developer-guide/ci/
            git diff --exit-code -- . ':!Gopkg.lock'  ':!assets/swagger.json' | tee codegen.patch
      - store_artifacts:
          path: codegen.patch
          when: always
  e2e:
    working_directory: /home/circleci/.go_workspace/src/github.com/argoproj/argo-cd
    machine:
      image: circleci/classic:201808-01
    steps:
      - attach_workspace:
          at: /home/circleci/.go_workspace/src/github.com/argoproj/argo-cd
      - run:
          name: Install and start K3S v0.5.0
          command: |
            curl -sfL https://get.k3s.io | sh -
            sudo chmod -R a+rw /etc/rancher/k3s
            kubectl version
          background: true
          environment:
            INSTALL_K3S_EXEC: --docker
            INSTALL_K3S_VERSION: v0.5.0
      - run:
          name: test it
          command: |
            find .
#      - run:
#          name: Create namespace
#          command: |
#            set -x
#            kubectl create ns argocd-e2e
#            kubens argocd-e2e
#            # install the certificates (not 100% sure we need this)
#            sudo cp /var/lib/rancher/k3s/server/tls/token-ca.crt /usr/local/share/ca-certificates/k3s.crt
#            sudo update-ca-certificates
#            # create the kubecfg, again - not sure we need this
#            cat /etc/rancher/k3s/k3s.yaml | sed "s/localhost/`hostname`/" | tee ~/.kube/config
#            echo "127.0.0.1 `hostname`" | sudo tee -a /etc/hosts
#      - run:
#          name: Apply manifests
#          command: kustomize build test/manifests/base | kubectl apply -f -
#      - run:
#          name: Start Redis
#          command: docker run --rm --name argocd-redis -i -p 6379:6379 redis:5.0.3-alpine --save "" --appendonly no
#          background: true
#      - run:
#          name: Start repo server
#          command: go run ./cmd/argocd-repo-server/main.go --loglevel debug --redis localhost:6379
#          background: true
#          environment:
#            # pft. if you do not quote "true", CircleCI turns it into "1", stoopid
#            ARGOCD_FAKE_IN_CLUSTER: "true"
#      - run:
#          name: Start API server
#          command: go run ./cmd/argocd-server/main.go --loglevel debug --redis localhost:6379 --insecure --dex-server http://localhost:5556 --repo-server localhost:8081 --staticassets ../argo-cd-ui/dist/app
#          background: true
#          environment:
#            ARGOCD_FAKE_IN_CLUSTER: "true"
#      - run:
#          name: Wait for API server
#          command: |
#            set -x
#            until curl -v http://localhost:8080/healthz; do sleep 3; done
#      - run:
#          name: Start controller
#          command: go run ./cmd/argocd-application-controller/main.go --loglevel debug --redis localhost:6379 --repo-server localhost:8081 --kubeconfig ~/.kube/config
#          background: true
#          environment:
#            ARGOCD_FAKE_IN_CLUSTER: "true"
#      - run:
#          name: Smoke test
#          command: |
#            set -x
#            argocd login localhost:8080 --plaintext  --username admin --password password
#            argocd app create guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook
#            argocd app sync guestbook
#            argocd app delete guestbook
#      - run:
#          name: Run e2e tests
#          command: |
#            set -x
#            mkdir -p /tmp/test-results
#            trap "go-junit-report </tmp/test-results/go-e2e.out > /tmp/test-results/go-e2e-report.xml" EXIT
#            make test-e2e | tee /tmp/test-results/go-e2e.out
#          environment:
#            ARGOCD_OPTS: "--server localhost:8080 --plaintext"
#            ARGOCD_E2E_EXPECT_TIMEOUT: "30"
#            ARGOCD_E2E_K3S: "true"
#      - store_test_results:
#          path: /tmp/test-results
  ui:
    # note that we checkout the code in ~/argo-cd/, but then work in ~/argo-cd/ui
    working_directory: ~/argo-cd/ui
    docker:
      - image: node:11.15.0
    steps:
      - checkout:
          path: ~/argo-cd/
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-v3-{{ checksum "yarn.lock" }}
      - run:
          name: Install
          command:
            yarn install --frozen-lockfile --ignore-optional --non-interactive
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-v3-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - node_modules
      - run:
          name: Test
          command: yarn test
      # This does not appear to work, and I don't want to spend time on it.
      - store_test_results:
          path: junit.xml
      - run:
          name: Lint
          command: yarn lint
workflows:
  version: 2
  workflow:
    jobs:
      - build
      - e2e:
          requires:
            - build
#      - ui:
#          # this isn't strictly true, we just put in here so that we 2/4 executors rather than 3/4
#          requires:
#            - build
